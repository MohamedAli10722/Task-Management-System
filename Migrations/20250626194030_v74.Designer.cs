// <auto-generated />
using System;
using Area.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Area.Migrations
{
    [DbContext(typeof(AreaContext))]
    [Migration("20250626194030_v74")]
    partial class v74
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Area.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("Area.Models.CheckListItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckListItems");
                });

            modelBuilder.Entity("Area.Models.ChecklistReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalPercentage")
                        .HasColumnType("float");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskID");

                    b.ToTable("ChecklistReview");
                });

            modelBuilder.Entity("Area.Models.DevicesToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DevicesToken");
                });

            modelBuilder.Entity("Area.Models.Evaluation", b =>
                {
                    b.Property<string>("EvaluationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckListScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAT")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeadLineScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectEvaluationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubmittedOnTime")
                        .HasColumnType("bit");

                    b.Property<string>("TaskEvaluationID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EvaluationID");

                    b.HasIndex("TaskEvaluationID")
                        .IsUnique()
                        .HasFilter("[TaskEvaluationID] IS NOT NULL");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Area.Models.KPIS", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KPIS");
                });

            modelBuilder.Entity("Area.Models.KPISEvaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinalScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.ToTable("KPISEvaluation");
                });

            modelBuilder.Entity("Area.Models.KPISelection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EvaluationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("KPIId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("KPIId");

                    b.ToTable("KPISelection");
                });

            modelBuilder.Entity("Area.Models.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("Area.Models.Notification", b =>
                {
                    b.Property<string>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TaskID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Area.Models.Permission", b =>
                {
                    b.Property<string>("Permission_id")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Permission_name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Permission_id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Permission_id = "1",
                            Permission_name = "Create Project"
                        },
                        new
                        {
                            Permission_id = "2",
                            Permission_name = "Edit Project"
                        },
                        new
                        {
                            Permission_id = "3",
                            Permission_name = "Delete Project"
                        },
                        new
                        {
                            Permission_id = "4",
                            Permission_name = "Create Task"
                        },
                        new
                        {
                            Permission_id = "5",
                            Permission_name = "Edit Task"
                        },
                        new
                        {
                            Permission_id = "6",
                            Permission_name = "Delete Task"
                        },
                        new
                        {
                            Permission_id = "7",
                            Permission_name = "Add Member"
                        },
                        new
                        {
                            Permission_id = "8",
                            Permission_name = "View Projects"
                        },
                        new
                        {
                            Permission_id = "9",
                            Permission_name = "View Tasks"
                        },
                        new
                        {
                            Permission_id = "10",
                            Permission_name = "View Reports"
                        },
                        new
                        {
                            Permission_id = "11",
                            Permission_name = "Test Tasks"
                        });
                });

            modelBuilder.Entity("Area.Models.Person", b =>
                {
                    b.Property<string>("NationalNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roleid")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("jobtitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NationalNumber");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Roleid");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Persons");

                    b.HasDiscriminator().HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Area.Models.PersonNotification", b =>
                {
                    b.Property<string>("person_ID")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("notifi_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("person_ID", "notifi_ID");

                    b.HasIndex("notifi_ID");

                    b.ToTable("PersonNotifications");
                });

            modelBuilder.Entity("Area.Models.Project", b =>
                {
                    b.Property<string>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationData")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvaluatioProjectid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("EvaluationScore")
                        .HasColumnType("float");

                    b.Property<string>("ManagerNationalNumber")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Product_Id")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionProjectDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SubmittedProjectOnTime")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("EvaluatioProjectid")
                        .IsUnique()
                        .HasFilter("[EvaluatioProjectid] IS NOT NULL");

                    b.HasIndex("ManagerNationalNumber");

                    b.HasIndex("Product_Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Area.Models.Role", b =>
                {
                    b.Property<string>("Role_id")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Role_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Role_id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Role_id = "1",
                            Role_name = "Manager"
                        },
                        new
                        {
                            Role_id = "2",
                            Role_name = "Product_Owner"
                        },
                        new
                        {
                            Role_id = "3",
                            Role_name = "Team_Leader"
                        },
                        new
                        {
                            Role_id = "4",
                            Role_name = "UI_Employee"
                        },
                        new
                        {
                            Role_id = "5",
                            Role_name = "Developer_Employee"
                        },
                        new
                        {
                            Role_id = "6",
                            Role_name = "Test_Employee"
                        });
                });

            modelBuilder.Entity("Area.Models.RolePermission", b =>
                {
                    b.Property<string>("Role_id")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Permission_id")
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("Role_id", "Permission_id");

                    b.HasIndex("Permission_id");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Role_id = "1",
                            Permission_id = "1"
                        },
                        new
                        {
                            Role_id = "1",
                            Permission_id = "2"
                        },
                        new
                        {
                            Role_id = "1",
                            Permission_id = "3"
                        },
                        new
                        {
                            Role_id = "1",
                            Permission_id = "7"
                        },
                        new
                        {
                            Role_id = "1",
                            Permission_id = "8"
                        },
                        new
                        {
                            Role_id = "1",
                            Permission_id = "10"
                        },
                        new
                        {
                            Role_id = "2",
                            Permission_id = "4"
                        },
                        new
                        {
                            Role_id = "2",
                            Permission_id = "5"
                        },
                        new
                        {
                            Role_id = "3",
                            Permission_id = "4"
                        },
                        new
                        {
                            Role_id = "4",
                            Permission_id = "9"
                        },
                        new
                        {
                            Role_id = "5",
                            Permission_id = "9"
                        },
                        new
                        {
                            Role_id = "6",
                            Permission_id = "11"
                        });
                });

            modelBuilder.Entity("Area.Models.Task", b =>
                {
                    b.Property<string>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationData")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeveloperNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Developer_EmployeeId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Developer_Employee_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evaluatiotasknid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InprogressCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsFirstTimeInTesting")
                        .HasColumnType("bit");

                    b.Property<string>("Leader_Id")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentTaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Id")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Project_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Project_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionTaskOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamLeader_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test_EmployeeId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Test_Employee_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UINotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UI_UXId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("UI_UX_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadDeveloperTask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadUITask")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.HasIndex("Developer_EmployeeId");

                    b.HasIndex("Leader_Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("Product_Id");

                    b.HasIndex("Project_Id");

                    b.HasIndex("Test_EmployeeId");

                    b.HasIndex("UI_UXId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Area.Models.TaskCheckListItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChecklistReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistReviewId");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskCheckListItems");
                });

            modelBuilder.Entity("Area.Models.Developer_Employee", b =>
                {
                    b.HasBaseType("Area.Models.Person");

                    b.HasDiscriminator().HasValue("Developer_Employee");
                });

            modelBuilder.Entity("Area.Models.Manager", b =>
                {
                    b.HasBaseType("Area.Models.Person");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Area.Models.ProductOwner", b =>
                {
                    b.HasBaseType("Area.Models.Person");

                    b.HasDiscriminator().HasValue("Product_Owner");
                });

            modelBuilder.Entity("Area.Models.TeamLeader", b =>
                {
                    b.HasBaseType("Area.Models.Person");

                    b.HasDiscriminator().HasValue("Team_Leader");
                });

            modelBuilder.Entity("Area.Models.Test_Employee", b =>
                {
                    b.HasBaseType("Area.Models.Person");

                    b.HasDiscriminator().HasValue("Test_Employee");
                });

            modelBuilder.Entity("Area.Models.UI_UX", b =>
                {
                    b.HasBaseType("Area.Models.Person");

                    b.HasDiscriminator().HasValue("UI_Employee");
                });

            modelBuilder.Entity("Area.Models.ChecklistReview", b =>
                {
                    b.HasOne("Area.Models.Task", "Task")
                        .WithMany("ChecklistReviews")
                        .HasForeignKey("TaskID");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Area.Models.Evaluation", b =>
                {
                    b.HasOne("Area.Models.Task", "TaskEvaluation")
                        .WithOne("EvaluationTask")
                        .HasForeignKey("Area.Models.Evaluation", "TaskEvaluationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TaskEvaluation");
                });

            modelBuilder.Entity("Area.Models.KPISEvaluation", b =>
                {
                    b.HasOne("Area.Models.Person", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Area.Models.Person", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Employee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Area.Models.KPISelection", b =>
                {
                    b.HasOne("Area.Models.KPISEvaluation", "Evaluation")
                        .WithMany("KPISelections")
                        .HasForeignKey("EvaluationId");

                    b.HasOne("Area.Models.KPIS", "KPI")
                        .WithMany()
                        .HasForeignKey("KPIId");

                    b.Navigation("Evaluation");

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("Area.Models.Notification", b =>
                {
                    b.HasOne("Area.Models.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectID");

                    b.HasOne("Area.Models.Task", "Task")
                        .WithMany("NotificationsTask")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Area.Models.Person", b =>
                {
                    b.HasOne("Area.Models.Role", "Role")
                        .WithMany("Persons")
                        .HasForeignKey("Roleid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Area.Models.PersonNotification", b =>
                {
                    b.HasOne("Area.Models.Notification", "Notification")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("notifi_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Area.Models.Person", "Person")
                        .WithMany("PersonNotifications")
                        .HasForeignKey("person_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Area.Models.Project", b =>
                {
                    b.HasOne("Area.Models.Evaluation", "EvaluationProject")
                        .WithOne("ProjectEvaluation")
                        .HasForeignKey("Area.Models.Project", "EvaluatioProjectid");

                    b.HasOne("Area.Models.Manager", null)
                        .WithMany("Projects")
                        .HasForeignKey("ManagerNationalNumber");

                    b.HasOne("Area.Models.ProductOwner", "ProductOwner")
                        .WithMany("Projects")
                        .HasForeignKey("Product_Id");

                    b.Navigation("EvaluationProject");

                    b.Navigation("ProductOwner");
                });

            modelBuilder.Entity("Area.Models.RolePermission", b =>
                {
                    b.HasOne("Area.Models.Permission", "Permission")
                        .WithMany("RolePermission")
                        .HasForeignKey("Permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Area.Models.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("Role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Area.Models.Task", b =>
                {
                    b.HasOne("Area.Models.Developer_Employee", "Developer_Employee")
                        .WithMany("Developer_EmployeeTasks")
                        .HasForeignKey("Developer_EmployeeId")
                        .HasConstraintName("FK_Tasks_Persons_Developer_Employee_NationalNumber");

                    b.HasOne("Area.Models.TeamLeader", "TeamLeader")
                        .WithMany("TeamLeaderTasks")
                        .HasForeignKey("Leader_Id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Area.Models.Task", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Area.Models.ProductOwner", "ProductOwner")
                        .WithMany("ProductTasks")
                        .HasForeignKey("Product_Id");

                    b.HasOne("Area.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Area.Models.Test_Employee", "Test_Employee")
                        .WithMany("Test_EmployeeTasks")
                        .HasForeignKey("Test_EmployeeId")
                        .HasConstraintName("FK_Tasks_Persons_Test_Employee_NationalNumber");

                    b.HasOne("Area.Models.UI_UX", "UI_UX")
                        .WithMany("UI_EmployeeTasks")
                        .HasForeignKey("UI_UXId")
                        .HasConstraintName("FK_Tasks_Persons_UI_UX_NationalNumber");

                    b.Navigation("Developer_Employee");

                    b.Navigation("ParentTask");

                    b.Navigation("ProductOwner");

                    b.Navigation("Project");

                    b.Navigation("TeamLeader");

                    b.Navigation("Test_Employee");

                    b.Navigation("UI_UX");
                });

            modelBuilder.Entity("Area.Models.TaskCheckListItem", b =>
                {
                    b.HasOne("Area.Models.ChecklistReview", "ChecklistReview")
                        .WithMany("Items")
                        .HasForeignKey("ChecklistReviewId");

                    b.HasOne("Area.Models.Task", "Task")
                        .WithMany("TaskCheckListItems")
                        .HasForeignKey("TaskID");

                    b.Navigation("ChecklistReview");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Area.Models.ChecklistReview", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Area.Models.Evaluation", b =>
                {
                    b.Navigation("ProjectEvaluation");
                });

            modelBuilder.Entity("Area.Models.KPISEvaluation", b =>
                {
                    b.Navigation("KPISelections");
                });

            modelBuilder.Entity("Area.Models.Notification", b =>
                {
                    b.Navigation("PersonNotifications");
                });

            modelBuilder.Entity("Area.Models.Permission", b =>
                {
                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Area.Models.Person", b =>
                {
                    b.Navigation("PersonNotifications");
                });

            modelBuilder.Entity("Area.Models.Project", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Area.Models.Role", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Area.Models.Task", b =>
                {
                    b.Navigation("ChecklistReviews");

                    b.Navigation("ChildTasks");

                    b.Navigation("EvaluationTask");

                    b.Navigation("NotificationsTask");

                    b.Navigation("TaskCheckListItems");
                });

            modelBuilder.Entity("Area.Models.Developer_Employee", b =>
                {
                    b.Navigation("Developer_EmployeeTasks");
                });

            modelBuilder.Entity("Area.Models.Manager", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Area.Models.ProductOwner", b =>
                {
                    b.Navigation("ProductTasks");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Area.Models.TeamLeader", b =>
                {
                    b.Navigation("TeamLeaderTasks");
                });

            modelBuilder.Entity("Area.Models.Test_Employee", b =>
                {
                    b.Navigation("Test_EmployeeTasks");
                });

            modelBuilder.Entity("Area.Models.UI_UX", b =>
                {
                    b.Navigation("UI_EmployeeTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
