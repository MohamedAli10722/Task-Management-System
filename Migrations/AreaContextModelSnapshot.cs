// <auto-generated />
using System;
using Area.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Area.Migrations
{
    [DbContext(typeof(AreaContext))]
    partial class AreaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Area.Models.Evaluation", b =>
                {
                    b.Property<string>("EvaluationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvaluationID");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("ProjectID")
                        .IsUnique()
                        .HasFilter("[ProjectID] IS NOT NULL");

                    b.HasIndex("TaskID")
                        .IsUnique()
                        .HasFilter("[TaskID] IS NOT NULL");

                    b.ToTable("Evaluation");
                });

            modelBuilder.Entity("Area.Models.Person", b =>
                {
                    b.Property<string>("NationalNumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Graduation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Worked_In")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NationalNumber");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Area.Models.Project", b =>
                {
                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeadLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Area.Models.Task", b =>
                {
                    b.Property<string>("TaskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeadLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("ProjectID")
                        .IsUnique()
                        .HasFilter("[ProjectID] IS NOT NULL");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Area.Models.User", b =>
                {
                    b.Property<string>("NationalNumber")
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NationalNumber");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Area.Models.Evaluation", b =>
                {
                    b.HasOne("Area.Models.Person", "Person")
                        .WithOne("Evaluation")
                        .HasForeignKey("Area.Models.Evaluation", "PersonId");

                    b.HasOne("Area.Models.Project", "Project")
                        .WithOne("Evaluation")
                        .HasForeignKey("Area.Models.Evaluation", "ProjectID");

                    b.HasOne("Area.Models.Task", "Task")
                        .WithOne("Evaluation")
                        .HasForeignKey("Area.Models.Evaluation", "TaskID");

                    b.Navigation("Person");

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Area.Models.Project", b =>
                {
                    b.HasOne("Area.Models.Person", "Person")
                        .WithOne("Project")
                        .HasForeignKey("Area.Models.Project", "PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Area.Models.Task", b =>
                {
                    b.HasOne("Area.Models.Person", "Person")
                        .WithOne("Task")
                        .HasForeignKey("Area.Models.Task", "PersonId");

                    b.HasOne("Area.Models.Project", "Project")
                        .WithOne("Task")
                        .HasForeignKey("Area.Models.Task", "ProjectID");

                    b.Navigation("Person");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Area.Models.User", b =>
                {
                    b.HasOne("Area.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Area.Models.User", "NationalNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Area.Models.Person", b =>
                {
                    b.Navigation("Evaluation");

                    b.Navigation("Project");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Area.Models.Project", b =>
                {
                    b.Navigation("Evaluation");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Area.Models.Task", b =>
                {
                    b.Navigation("Evaluation");
                });
#pragma warning restore 612, 618
        }
    }
}
