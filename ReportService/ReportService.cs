using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using Area.DTOs;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using Area.Dtos;

namespace Area.ReportService
{
    public class ReportService
    {
        public byte[] GenerateActivityReport(List<EmployeeActivityDTO> data, ReportMetadataDTO metadata)
        {
            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(30);

                    // === BACKGROUND IMAGE FOR ALL PAGES ===
                    page.Background().Image("wwwroot/images/background.png", ImageScaling.FitArea);

                    // === HEADER on every page ===
                    page.Header().PaddingBottom(20).Row(row =>
                    {
                        // Left: Meta Info
                        row.RelativeItem(1).Column(col =>
                        {
                            col.Item().Text($"Generated by: {metadata.UserName}").FontSize(10);
                            col.Item().Text($"Role: {metadata.UserRole}").FontSize(10);
                            col.Item().Text($"Date: {metadata.CreatedAt:dd-MM-yyyy HH:mm tt}").FontSize(10);
                        });

                        // Center: Title
                        row.RelativeItem(1).Column(col =>
                        {
                            col.Item().AlignCenter().Text(metadata.ProgramName).FontSize(18).Bold();
                            col.Item().AlignCenter().Text("Session-Based Activity Report").FontSize(14).Italic();
                        });

                        // Right: Logo
                        row.RelativeItem(1).AlignRight().Column(col =>
                        {
                            if (File.Exists(metadata.LogoPath))
                            {
                                col.Item().Height(70).Image(metadata.LogoPath, ImageScaling.FitHeight);
                            }
                            else
                            {
                                col.Item().Height(50)
                                    .Background(Colors.Grey.Lighten3)
                                    .AlignMiddle().AlignCenter()
                                    .Text("No Logo").FontSize(8).Italic();
                            }
                        });
                    });

                    // === MAIN CONTENT ===
                    page.Content().PaddingHorizontal(10).Column(col =>
                    {
                        foreach (var employee in data)
                        {
                            col.Item().PaddingBottom(10).Text(text =>
                            {
                                text.Span("User Name: ").FontSize(12).SemiBold();
                                text.Span(employee.UserName).FontSize(12).Bold();
                            });

                            foreach (var session in employee.Sessions)
                            {
                                col.Item().Text($"Login: {session.LoginTime:dd-MM-yyyy HH:mm}").FontSize(11);
                                col.Item().Text("Activity:").FontSize(11).SemiBold();

                                if (session.Activities.Any())
                                {
                                    foreach (var act in session.Activities)
                                    {
                                        col.Item().Text($" - [{act.Time:HH:mm}] {act.Action} {act.EntityName} - \"{act.EntityTitle}\"").FontSize(10);
                                    }
                                }
                                else
                                {
                                    col.Item().Text(" - No activity in this session").FontSize(10).Italic();
                                }

                                string logoutText = session.LogoutTime.HasValue
                                    ? session.LogoutTime.Value.ToString("dd-MM-yyyy HH:mm")
                                    : "Still logged in";

                                col.Item().PaddingBottom(5).Text($"Logout: {logoutText}").FontSize(11);

                                // Line between sessions
                                col.Item().PaddingVertical(10).LineHorizontal(0.5f).LineColor(Colors.Grey.Lighten2);
                            }

                            // Line between users
                            col.Item().PaddingVertical(15).LineHorizontal(1).LineColor(Colors.Black);
                        }
                    });

                    // === FOOTER with Page Number ===
                    page.Footer().PaddingBottom(20).AlignCenter().Text(text =>
                    {
                        text.Span("Page ");
                        text.CurrentPageNumber();
                        text.Span(" of ");
                        text.TotalPages();
                    });
                });
            });

            return document.GeneratePdf();
        }

        public byte[] GenerateRolesReport(List<ReportDTO> data, ReportMetadataDTO metadata, int totalEmployees)
        {
            var customOrder = new List<string>
    {
        "Manager",
        "Product Owner",
        "Team Leader",
        "UI Employee",
        "Developer Employee",
        "Test Employee"
    };

            var sortedData = data
                .OrderBy(r =>
                    customOrder.FindIndex(name =>
                        string.Equals(name, r.RoleName, StringComparison.OrdinalIgnoreCase)
                    ) >= 0
                        ? customOrder.FindIndex(name =>
                            string.Equals(name, r.RoleName, StringComparison.OrdinalIgnoreCase))
                        : int.MaxValue)
                .ToList();

            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(30);

                    // === Set background image for every page ===
                    page.Background().Image("wwwroot/images/background.png", ImageScaling.FitArea);

                    // === Header with metadata ===
                    page.Header().PaddingBottom(20).Row(row =>
                    {
                        row.RelativeItem(1).Column(col =>
                        {
                            col.Item().Text($"Generated by: {metadata.UserName}").FontSize(10);
                            col.Item().Text($"Role: {metadata.UserRole}").FontSize(10);
                            col.Item().Text($"Date: {metadata.CreatedAt:dd-MM-yyyy HH:mm tt}").FontSize(10);
                        });

                        row.RelativeItem(1).Column(col =>
                        {
                            col.Item().AlignCenter().Text(metadata.ProgramName).FontSize(18).Bold();
                            col.Item().AlignCenter().Text("Employee Role Report").FontSize(14).Italic();
                        });

                        row.RelativeItem(1).AlignRight().Column(col =>
                        {
                            if (File.Exists(metadata.LogoPath))
                            {
                                col.Item().Height(70).Image(metadata.LogoPath, ImageScaling.FitHeight);
                            }
                            else
                            {
                                col.Item().Height(50).Background(Colors.Grey.Lighten3)
                                    .AlignMiddle().AlignCenter()
                                    .Text("No Logo").FontSize(8).Italic();
                            }
                        });
                    });

                    // === Content ===
                    page.Content().PaddingHorizontal(10).Column(col =>
                    {
                        foreach (var role in sortedData)
                        {
                            double percentage = totalEmployees > 0
                                ? Math.Round((double)role.Employees.Count / totalEmployees * 100, 2)
                                : 0;

                            col.Item().PaddingBottom(5).Text($"Role: {role.RoleName} ({percentage}%)").FontSize(13).Bold();

                            col.Item().PaddingBottom(5).Row(row =>
                            {
                                foreach (var perm in role.Permissions)
                                {
                                    row.AutoItem().PaddingRight(5).Text($"[{perm}]").FontSize(11);
                                }
                            });

                            if (role.Employees.Any())
                            {
                                int index = 1;
                                foreach (var emp in role.Employees)
                                {
                                    col.Item().Text($"{index++}. {emp}").FontSize(11);
                                }
                            }
                            else
                            {
                                col.Item().Text("No employees in this role").FontSize(11).Italic();
                            }

                            col.Item().PaddingVertical(10).LineHorizontal(1).LineColor(Colors.Grey.Lighten2);
                        }
                    });

                    // === Footer with page number slightly up ===
                    page.Footer().PaddingBottom(20).AlignCenter().Text(text =>
                    {
                        text.Span("Page ");
                        text.CurrentPageNumber();
                        text.Span(" of ");
                        text.TotalPages();
                    });
                });
            });

            return document.GeneratePdf();
        }


    }
}